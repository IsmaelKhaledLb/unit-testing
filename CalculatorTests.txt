// Testing complex class

class CalculatorTests()
{
    Calculator serviceUnderTest = new Calculator()

    function GivenThreeNumbers_WhenNoneOfThemEqualsZero_ThenTheResultIsNotZero()
    {
        result = serviceUnderTest.ComplexCalculation(1, 2, 3)
        assert result is not equal to 0
    }

    function GivenThreeNumbers_WhenFirstNumberIsZero_ThenTheResultIsEqualToThirdNumber()
    {
        number firstNumber = 0
        number secondNumber = 1
        number thirdNumber = 2
        resultDeferred = deferExecution of serviceUnderTest.ComplexCalculation(firstNumber, secondNumber, thirdNumber)
        assert resultDeferred.Run() does not throw Exception
        assert resultDeferred.Run()'s result is equal to third number
    }

    ... other tests that aren't relevant
}



// class code
class Calculator()
{
    private Adder _adder = new Adder()
    private Multiplier _multiplier = new Multiplier()
    
    function ComplexCalculation(number firstNumber, number secondNumber, number thirdNumber) // (firstNumber * SecondNumber) + thirdNumber
    {
        if (firstNumber + secondNumber) equals 0 then throw new Exception("This is illegal")
        multiplierResult = _multiplier.Multiply(firstNumber, secondNumber)
        finalResult = _adder.Add(multiplierResult, thirdNumber)

        return finalResult
    }
}
